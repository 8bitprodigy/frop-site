<!doctype html>
<html>
    <head> <!-- yes, please. -->
        <title>
8-Bit's Frop site - Hi-C - A Call for an Improved C
        </title>
        <style>
            @import url("styles.css");

@import url("/styles.css");
        </style>
    </head>
    <body>
        <div id="container">
            <div id="links" class="nerc">
<a href="https://frop.prof">Home</a>&nbsp;|&nbsp;<a href="https://8bit.frop.prof">Main</a>&nbsp;|&nbsp;<a href="https://luke.frop.prof">Luke</a><span class="spacer" ></span><a href="https://8bitprodigy.github.io/">My Portfolio</a>
            </div>
            <div id="header" class="nerc">
                <h1>
8-Bit's corner
                </h1>
                <h2>
The people may be pink, but their money is green!
                </h2>
            </div>
            <div id="body">
                <span id="sidebar" class="nerc">
<ul>
<li class="dir"><a href="/">Main</a>
<ul>
	<li class="page"><a href="/Hi-C_-_A_Call_for_an_Improved_C.htm">>> Hi-C - A Call for an Improved C <<</a></li>
<li class="dir"><a href="/Harmful/">Harmful</a>
<ul>
		<li class="page"><a href="/Harmful/GNU_GPL_License.htm">GNU GPL License</a></li>
</ul>
</li>	<li class="page"><a href="/regex.htm">regex</a></li>
</ul>
</li>
</ul>
                </span>
                <span id="content" class="nerc">
<h1>Hi-C</h1>
<h3>A call for an Improved C</h3>
<p>(Public Domain/CC0) 2025, Chris DeBoy</p>
<h2>Rationale</h2>
<p>C is great -- but it is lacking in metaprogramming features. There are preprocessor directives that enable an impressive amount of metaprogramming, but only with enough effort. Nim, on the other hand, has among the most powerful metaprogramming feature sets of any modern language. The goal is to bring them to C as part of the language proper, rather than as part of the preprocessor, but also keeping the implementation conservative and minimal.</p>
<h2>Additions</h2>
<p>In order to facilitate this level of metaprogramming power, a few additions will need to be made to C's keywords and semantics.</p>
<h3>Keywords:</h3>
<ul>
<li>
<p><code>macro</code> - Provides deep AST manipulation.</p>
</li>
<li>
<p><code>transform</code> - Allows syntax extensions by rewriting code patterns at compile time.</p>
</li>
<li>
<p>A variation of <code>typeof()</code> that returns structured type information, including base type, function pointer detection, and AST representation.</p>
</li>
</ul>
<h3>Semantics:</h3>
<h4>Argument/Operator/Keyword(maybe) overloading:</h4>
<ul>
<li>
<p><em>Argument Overloading</em> - Allows multiple functions with the same symbol to be declared, so long as their signature and/or return type differ.
Usage:</p>
<pre><code class="language-c">int 
myFunc(int x) 
{
    /* Function definition here */    
}

int
myFunc(int x, float y)
{
    /* Function definition here */
}
</code></pre>
</li>
<li>
<p><em>Operator Overloading</em> - Allows new functionality to be added to operators to enable more ergonomic expression of operations with complex data types. To declare an overloading function using an operator, the operator must be wrapped in backticks (<code>`</code>).
Syntax:
<code>[TYPE] `[OPERATOR]`([ARGS...]) {[FUNCTION BODY]}</code>
Usage:</p>
<pre><code class="language-c">/* assuming the following struct was typedef'd:
struct
Vec2
{
    double x;
    double y;  
} Vec2;
*/

Vec2 
`+`(Vec2 vec2_1, Vec2 vec2_2)
{
    return (Vec2){
        .x = vec2_1.x + vec2_2.x,
        .y = vec2_1.y + vec2_2.y
    };
}

Vec2 v1 = (Vec2){.x = 1.0f, .y = 1.0f};
Vec2 v2 = (Vec2){.x = 2.0f, .y = 2.0f};

Vec2 v3 = v1 + v2;
</code></pre>
</li>
<li>
<p><em>Keyword Overloading (maybe)</em> - Just floating this one. May be too powerful for prime time.</p>
</li>
</ul>
<h4>Expanded execution of compile time computations</h4>

                </span>
            </div>
            <div id="footer" class="nerc">
This page was generated by&nbsp;<a href="https://github.com/8bitprodigy/nerc">nerc</a>.
                <span class="spacer" ></span>
All information here is public domain/CC0/0BSD.
            </div>
        </div>
    </body>
</html>
